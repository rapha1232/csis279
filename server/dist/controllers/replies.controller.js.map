{"version":3,"sources":["../../src/controllers/replies.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport { Container } from 'typedi';\nimport { Replies } from '@prisma/client';\nimport { RepliesService } from '@/services/replies.service';\n\nexport class RepliesController {\n  public r = Container.get(RepliesService);\n\n  public getAll = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    const { QuestionID } = req.query;\n    try {\n      const allReplies: Replies[] = await this.r.getAll(Number(QuestionID));\n      res.status(201).json({ data: allReplies, message: 'get All Replies' });\n    } catch (error) {\n      next(error);\n    }\n  };\n  public likeReply = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const { ReplyID, UserID } = req.query;\n      await this.r.likeReply(Number(ReplyID), Number(UserID));\n      res.status(201).json({ message: 'liked Reply' });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public unlikeReply = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const { ReplyID, UserID } = req.query;\n      await this.r.unlikeReply(Number(ReplyID), Number(UserID));\n      res.status(201).json({ message: 'unliked Reply' });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public filtered = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const { q, QuestionID } = req.query;\n      if (q === 'all' || q === 'popular' || q === 'recent' || q === 'name' || q === 'old') {\n        const filteredReplies: Replies[] = await this.r.filtered(q, Number(QuestionID));\n        res.status(201).json({ data: filteredReplies, message: 'filtered Replies' });\n      } else {\n        res.status(400).json({ message: 'Invalid query parameter' });\n      }\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public createQuestionReply = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const { Content, CreatedAt, CreatorID, QuestionID } = req.body;\n      const newReply = await this.r.createQuestionReply(Content, CreatedAt, Number(CreatorID), Number(QuestionID));\n      res.status(201).json({ data: newReply, message: 'created Reply' });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public createTopicReply = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\n    try {\n      const { Content, CreatedAt, CreatorID, TopicID } = req.body;\n      const newReply = await this.r.createTopicReply(Content, CreatedAt, Number(CreatorID), Number(TopicID));\n      res.status(201).json({ data: newReply, message: 'created Reply' });\n    } catch (error) {\n      res.send(error);\n      next(error);\n    }\n  };\n}\n"],"names":["RepliesController","r","Container","get","RepliesService","getAll","req","res","next","QuestionID","query","allReplies","Number","status","json","data","message","error","likeReply","ReplyID","UserID","unlikeReply","filtered","q","filteredReplies","createQuestionReply","Content","CreatedAt","CreatorID","body","newReply","createTopicReply","TopicID","send"],"mappings":"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"}